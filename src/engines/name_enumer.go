// Code generated by "enumer -type=Name"; DO NOT EDIT.

package engines

import (
	"fmt"
	"strings"
)

const _NameName = "UndefinedBingBraveDuckDuckGoEtoolsGoogleMojeekPresearchQwantStartpageSwisscowsYahooYandexYep"

var _NameIndex = [...]uint8{0, 9, 13, 18, 28, 34, 40, 46, 55, 60, 69, 78, 83, 89, 92}

const _NameLowerName = "undefinedbingbraveduckduckgoetoolsgooglemojeekpresearchqwantstartpageswisscowsyahooyandexyep"

func (i Name) String() string {
	if i < 0 || i >= Name(len(_NameIndex)-1) {
		return fmt.Sprintf("Name(%d)", i)
	}
	return _NameName[_NameIndex[i]:_NameIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _NameNoOp() {
	var x [1]struct{}
	_ = x[Undefined-(0)]
	_ = x[Bing-(1)]
	_ = x[Brave-(2)]
	_ = x[DuckDuckGo-(3)]
	_ = x[Etools-(4)]
	_ = x[Google-(5)]
	_ = x[Mojeek-(6)]
	_ = x[Presearch-(7)]
	_ = x[Qwant-(8)]
	_ = x[Startpage-(9)]
	_ = x[Swisscows-(10)]
	_ = x[Yahoo-(11)]
	_ = x[Yandex-(12)]
	_ = x[Yep-(13)]
}

var _NameValues = []Name{Undefined, Bing, Brave, DuckDuckGo, Etools, Google, Mojeek, Presearch, Qwant, Startpage, Swisscows, Yahoo, Yandex, Yep}

var _NameNameToValueMap = map[string]Name{
	_NameName[0:9]:        Undefined,
	_NameLowerName[0:9]:   Undefined,
	_NameName[9:13]:       Bing,
	_NameLowerName[9:13]:  Bing,
	_NameName[13:18]:      Brave,
	_NameLowerName[13:18]: Brave,
	_NameName[18:28]:      DuckDuckGo,
	_NameLowerName[18:28]: DuckDuckGo,
	_NameName[28:34]:      Etools,
	_NameLowerName[28:34]: Etools,
	_NameName[34:40]:      Google,
	_NameLowerName[34:40]: Google,
	_NameName[40:46]:      Mojeek,
	_NameLowerName[40:46]: Mojeek,
	_NameName[46:55]:      Presearch,
	_NameLowerName[46:55]: Presearch,
	_NameName[55:60]:      Qwant,
	_NameLowerName[55:60]: Qwant,
	_NameName[60:69]:      Startpage,
	_NameLowerName[60:69]: Startpage,
	_NameName[69:78]:      Swisscows,
	_NameLowerName[69:78]: Swisscows,
	_NameName[78:83]:      Yahoo,
	_NameLowerName[78:83]: Yahoo,
	_NameName[83:89]:      Yandex,
	_NameLowerName[83:89]: Yandex,
	_NameName[89:92]:      Yep,
	_NameLowerName[89:92]: Yep,
}

var _NameNames = []string{
	_NameName[0:9],
	_NameName[9:13],
	_NameName[13:18],
	_NameName[18:28],
	_NameName[28:34],
	_NameName[34:40],
	_NameName[40:46],
	_NameName[46:55],
	_NameName[55:60],
	_NameName[60:69],
	_NameName[69:78],
	_NameName[78:83],
	_NameName[83:89],
	_NameName[89:92],
}

// NameString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func NameString(s string) (Name, error) {
	if val, ok := _NameNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _NameNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Name values", s)
}

// NameValues returns all values of the enum
func NameValues() []Name {
	return _NameValues
}

// NameStrings returns a slice of all String values of the enum
func NameStrings() []string {
	strs := make([]string, len(_NameNames))
	copy(strs, _NameNames)
	return strs
}

// IsAName returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Name) IsAName() bool {
	for _, v := range _NameValues {
		if i == v {
			return true
		}
	}
	return false
}
