// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: get.sql

package sqlite

import (
	"context"
	"time"
)

const getImageResultsByQueryAndEngineWithEngineRanks = `-- name: GetImageResultsByQueryAndEngineWithEngineRanks :many
SELECT results.id, "query", url, rank, score, title, description, created_at, image_results.id, image_original_height, image_original_width, image_thumbnail_height, image_thumbnail_width, image_thumbnail_url, image_source, image_source_url, image_results.result_id, engine_ranks.id, engine_name, engine_rank, engine_page, engine_on_page_rank, engine_ranks.result_id FROM results
JOIN image_results ON results.id = image_results.result_id
JOIN engine_ranks ON results.id = engine_ranks.result_id
WHERE query = ? AND engine_ranks.engine_name = ?
ORDER BY results.rank ASC, engine_ranks.engine_rank ASC
`

type GetImageResultsByQueryAndEngineWithEngineRanksParams struct {
	Query      string
	EngineName string
}

type GetImageResultsByQueryAndEngineWithEngineRanksRow struct {
	ID                   int64
	Query                string
	Url                  string
	Rank                 int64
	Score                float64
	Title                string
	Description          string
	CreatedAt            time.Time
	ID_2                 int64
	ImageOriginalHeight  int64
	ImageOriginalWidth   int64
	ImageThumbnailHeight int64
	ImageThumbnailWidth  int64
	ImageThumbnailUrl    string
	ImageSource          string
	ImageSourceUrl       string
	ResultID             int64
	ID_3                 int64
	EngineName           string
	EngineRank           int64
	EnginePage           int64
	EngineOnPageRank     int64
	ResultID_2           int64
}

func (q *Queries) GetImageResultsByQueryAndEngineWithEngineRanks(ctx context.Context, arg GetImageResultsByQueryAndEngineWithEngineRanksParams) ([]GetImageResultsByQueryAndEngineWithEngineRanksRow, error) {
	rows, err := q.db.QueryContext(ctx, getImageResultsByQueryAndEngineWithEngineRanks, arg.Query, arg.EngineName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetImageResultsByQueryAndEngineWithEngineRanksRow
	for rows.Next() {
		var i GetImageResultsByQueryAndEngineWithEngineRanksRow
		if err := rows.Scan(
			&i.ID,
			&i.Query,
			&i.Url,
			&i.Rank,
			&i.Score,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.ID_2,
			&i.ImageOriginalHeight,
			&i.ImageOriginalWidth,
			&i.ImageThumbnailHeight,
			&i.ImageThumbnailWidth,
			&i.ImageThumbnailUrl,
			&i.ImageSource,
			&i.ImageSourceUrl,
			&i.ResultID,
			&i.ID_3,
			&i.EngineName,
			&i.EngineRank,
			&i.EnginePage,
			&i.EngineOnPageRank,
			&i.ResultID_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getImageResultsByQueryAndEngineWithEngineRanksNotOlderThanTimestamp = `-- name: GetImageResultsByQueryAndEngineWithEngineRanksNotOlderThanTimestamp :many
SELECT results.id, "query", url, rank, score, title, description, created_at, image_results.id, image_original_height, image_original_width, image_thumbnail_height, image_thumbnail_width, image_thumbnail_url, image_source, image_source_url, image_results.result_id, engine_ranks.id, engine_name, engine_rank, engine_page, engine_on_page_rank, engine_ranks.result_id FROM results
JOIN image_results ON results.id = image_results.result_id
JOIN engine_ranks ON results.id = engine_ranks.result_id
WHERE query = ? AND engine_ranks.engine_name = ? AND created_at > ?
ORDER BY results.rank ASC, engine_ranks.engine_rank ASC
`

type GetImageResultsByQueryAndEngineWithEngineRanksNotOlderThanTimestampParams struct {
	Query      string
	EngineName string
	CreatedAt  time.Time
}

type GetImageResultsByQueryAndEngineWithEngineRanksNotOlderThanTimestampRow struct {
	ID                   int64
	Query                string
	Url                  string
	Rank                 int64
	Score                float64
	Title                string
	Description          string
	CreatedAt            time.Time
	ID_2                 int64
	ImageOriginalHeight  int64
	ImageOriginalWidth   int64
	ImageThumbnailHeight int64
	ImageThumbnailWidth  int64
	ImageThumbnailUrl    string
	ImageSource          string
	ImageSourceUrl       string
	ResultID             int64
	ID_3                 int64
	EngineName           string
	EngineRank           int64
	EnginePage           int64
	EngineOnPageRank     int64
	ResultID_2           int64
}

func (q *Queries) GetImageResultsByQueryAndEngineWithEngineRanksNotOlderThanTimestamp(ctx context.Context, arg GetImageResultsByQueryAndEngineWithEngineRanksNotOlderThanTimestampParams) ([]GetImageResultsByQueryAndEngineWithEngineRanksNotOlderThanTimestampRow, error) {
	rows, err := q.db.QueryContext(ctx, getImageResultsByQueryAndEngineWithEngineRanksNotOlderThanTimestamp, arg.Query, arg.EngineName, arg.CreatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetImageResultsByQueryAndEngineWithEngineRanksNotOlderThanTimestampRow
	for rows.Next() {
		var i GetImageResultsByQueryAndEngineWithEngineRanksNotOlderThanTimestampRow
		if err := rows.Scan(
			&i.ID,
			&i.Query,
			&i.Url,
			&i.Rank,
			&i.Score,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.ID_2,
			&i.ImageOriginalHeight,
			&i.ImageOriginalWidth,
			&i.ImageThumbnailHeight,
			&i.ImageThumbnailWidth,
			&i.ImageThumbnailUrl,
			&i.ImageSource,
			&i.ImageSourceUrl,
			&i.ResultID,
			&i.ID_3,
			&i.EngineName,
			&i.EngineRank,
			&i.EnginePage,
			&i.EngineOnPageRank,
			&i.ResultID_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getImageResultsByQueryWithEngineRanks = `-- name: GetImageResultsByQueryWithEngineRanks :many
SELECT results.id, "query", url, rank, score, title, description, created_at, image_results.id, image_original_height, image_original_width, image_thumbnail_height, image_thumbnail_width, image_thumbnail_url, image_source, image_source_url, image_results.result_id, engine_ranks.id, engine_name, engine_rank, engine_page, engine_on_page_rank, engine_ranks.result_id FROM results
JOIN image_results ON results.id = image_results.result_id
JOIN engine_ranks ON results.id = engine_ranks.result_id
WHERE query = ?
ORDER BY results.rank ASC, engine_ranks.engine_rank ASC
`

type GetImageResultsByQueryWithEngineRanksRow struct {
	ID                   int64
	Query                string
	Url                  string
	Rank                 int64
	Score                float64
	Title                string
	Description          string
	CreatedAt            time.Time
	ID_2                 int64
	ImageOriginalHeight  int64
	ImageOriginalWidth   int64
	ImageThumbnailHeight int64
	ImageThumbnailWidth  int64
	ImageThumbnailUrl    string
	ImageSource          string
	ImageSourceUrl       string
	ResultID             int64
	ID_3                 int64
	EngineName           string
	EngineRank           int64
	EnginePage           int64
	EngineOnPageRank     int64
	ResultID_2           int64
}

func (q *Queries) GetImageResultsByQueryWithEngineRanks(ctx context.Context, query string) ([]GetImageResultsByQueryWithEngineRanksRow, error) {
	rows, err := q.db.QueryContext(ctx, getImageResultsByQueryWithEngineRanks, query)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetImageResultsByQueryWithEngineRanksRow
	for rows.Next() {
		var i GetImageResultsByQueryWithEngineRanksRow
		if err := rows.Scan(
			&i.ID,
			&i.Query,
			&i.Url,
			&i.Rank,
			&i.Score,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.ID_2,
			&i.ImageOriginalHeight,
			&i.ImageOriginalWidth,
			&i.ImageThumbnailHeight,
			&i.ImageThumbnailWidth,
			&i.ImageThumbnailUrl,
			&i.ImageSource,
			&i.ImageSourceUrl,
			&i.ResultID,
			&i.ID_3,
			&i.EngineName,
			&i.EngineRank,
			&i.EnginePage,
			&i.EngineOnPageRank,
			&i.ResultID_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getImageResultsByQueryWithEngineRanksNotOlderThanTimestamp = `-- name: GetImageResultsByQueryWithEngineRanksNotOlderThanTimestamp :many
SELECT results.id, "query", url, rank, score, title, description, created_at, image_results.id, image_original_height, image_original_width, image_thumbnail_height, image_thumbnail_width, image_thumbnail_url, image_source, image_source_url, image_results.result_id, engine_ranks.id, engine_name, engine_rank, engine_page, engine_on_page_rank, engine_ranks.result_id FROM results
JOIN image_results ON results.id = image_results.result_id
JOIN engine_ranks ON results.id = engine_ranks.result_id
WHERE query = ? AND created_at > ?
ORDER BY results.rank ASC, engine_ranks.engine_rank ASC
`

type GetImageResultsByQueryWithEngineRanksNotOlderThanTimestampParams struct {
	Query     string
	CreatedAt time.Time
}

type GetImageResultsByQueryWithEngineRanksNotOlderThanTimestampRow struct {
	ID                   int64
	Query                string
	Url                  string
	Rank                 int64
	Score                float64
	Title                string
	Description          string
	CreatedAt            time.Time
	ID_2                 int64
	ImageOriginalHeight  int64
	ImageOriginalWidth   int64
	ImageThumbnailHeight int64
	ImageThumbnailWidth  int64
	ImageThumbnailUrl    string
	ImageSource          string
	ImageSourceUrl       string
	ResultID             int64
	ID_3                 int64
	EngineName           string
	EngineRank           int64
	EnginePage           int64
	EngineOnPageRank     int64
	ResultID_2           int64
}

func (q *Queries) GetImageResultsByQueryWithEngineRanksNotOlderThanTimestamp(ctx context.Context, arg GetImageResultsByQueryWithEngineRanksNotOlderThanTimestampParams) ([]GetImageResultsByQueryWithEngineRanksNotOlderThanTimestampRow, error) {
	rows, err := q.db.QueryContext(ctx, getImageResultsByQueryWithEngineRanksNotOlderThanTimestamp, arg.Query, arg.CreatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetImageResultsByQueryWithEngineRanksNotOlderThanTimestampRow
	for rows.Next() {
		var i GetImageResultsByQueryWithEngineRanksNotOlderThanTimestampRow
		if err := rows.Scan(
			&i.ID,
			&i.Query,
			&i.Url,
			&i.Rank,
			&i.Score,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.ID_2,
			&i.ImageOriginalHeight,
			&i.ImageOriginalWidth,
			&i.ImageThumbnailHeight,
			&i.ImageThumbnailWidth,
			&i.ImageThumbnailUrl,
			&i.ImageSource,
			&i.ImageSourceUrl,
			&i.ResultID,
			&i.ID_3,
			&i.EngineName,
			&i.EngineRank,
			&i.EnginePage,
			&i.EngineOnPageRank,
			&i.ResultID_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getResultsByQueryAndEngineWithEngineRanks = `-- name: GetResultsByQueryAndEngineWithEngineRanks :many
SELECT results.id, "query", url, rank, score, title, description, created_at, engine_ranks.id, engine_name, engine_rank, engine_page, engine_on_page_rank, result_id FROM results
JOIN engine_ranks ON results.id = engine_ranks.result_id
WHERE query = ? AND engine_ranks.engine_name = ?
ORDER BY results.rank ASC, engine_ranks.engine_rank ASC
`

type GetResultsByQueryAndEngineWithEngineRanksParams struct {
	Query      string
	EngineName string
}

type GetResultsByQueryAndEngineWithEngineRanksRow struct {
	ID               int64
	Query            string
	Url              string
	Rank             int64
	Score            float64
	Title            string
	Description      string
	CreatedAt        time.Time
	ID_2             int64
	EngineName       string
	EngineRank       int64
	EnginePage       int64
	EngineOnPageRank int64
	ResultID         int64
}

func (q *Queries) GetResultsByQueryAndEngineWithEngineRanks(ctx context.Context, arg GetResultsByQueryAndEngineWithEngineRanksParams) ([]GetResultsByQueryAndEngineWithEngineRanksRow, error) {
	rows, err := q.db.QueryContext(ctx, getResultsByQueryAndEngineWithEngineRanks, arg.Query, arg.EngineName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetResultsByQueryAndEngineWithEngineRanksRow
	for rows.Next() {
		var i GetResultsByQueryAndEngineWithEngineRanksRow
		if err := rows.Scan(
			&i.ID,
			&i.Query,
			&i.Url,
			&i.Rank,
			&i.Score,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.ID_2,
			&i.EngineName,
			&i.EngineRank,
			&i.EnginePage,
			&i.EngineOnPageRank,
			&i.ResultID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getResultsByQueryAndEngineWithEngineRanksNotOlderThanTimestamp = `-- name: GetResultsByQueryAndEngineWithEngineRanksNotOlderThanTimestamp :many
SELECT results.id, "query", url, rank, score, title, description, created_at, engine_ranks.id, engine_name, engine_rank, engine_page, engine_on_page_rank, result_id FROM results
JOIN engine_ranks ON results.id = engine_ranks.result_id
WHERE query = ? AND engine_ranks.engine_name = ? AND created_at > ?
ORDER BY results.rank ASC, engine_ranks.engine_rank ASC
`

type GetResultsByQueryAndEngineWithEngineRanksNotOlderThanTimestampParams struct {
	Query      string
	EngineName string
	CreatedAt  time.Time
}

type GetResultsByQueryAndEngineWithEngineRanksNotOlderThanTimestampRow struct {
	ID               int64
	Query            string
	Url              string
	Rank             int64
	Score            float64
	Title            string
	Description      string
	CreatedAt        time.Time
	ID_2             int64
	EngineName       string
	EngineRank       int64
	EnginePage       int64
	EngineOnPageRank int64
	ResultID         int64
}

func (q *Queries) GetResultsByQueryAndEngineWithEngineRanksNotOlderThanTimestamp(ctx context.Context, arg GetResultsByQueryAndEngineWithEngineRanksNotOlderThanTimestampParams) ([]GetResultsByQueryAndEngineWithEngineRanksNotOlderThanTimestampRow, error) {
	rows, err := q.db.QueryContext(ctx, getResultsByQueryAndEngineWithEngineRanksNotOlderThanTimestamp, arg.Query, arg.EngineName, arg.CreatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetResultsByQueryAndEngineWithEngineRanksNotOlderThanTimestampRow
	for rows.Next() {
		var i GetResultsByQueryAndEngineWithEngineRanksNotOlderThanTimestampRow
		if err := rows.Scan(
			&i.ID,
			&i.Query,
			&i.Url,
			&i.Rank,
			&i.Score,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.ID_2,
			&i.EngineName,
			&i.EngineRank,
			&i.EnginePage,
			&i.EngineOnPageRank,
			&i.ResultID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getResultsByQueryWithEngineRanks = `-- name: GetResultsByQueryWithEngineRanks :many
SELECT results.id, "query", url, rank, score, title, description, created_at, engine_ranks.id, engine_name, engine_rank, engine_page, engine_on_page_rank, result_id FROM results
JOIN engine_ranks ON results.id = engine_ranks.result_id
WHERE query = ?
ORDER BY results.rank ASC, engine_ranks.engine_rank ASC
`

type GetResultsByQueryWithEngineRanksRow struct {
	ID               int64
	Query            string
	Url              string
	Rank             int64
	Score            float64
	Title            string
	Description      string
	CreatedAt        time.Time
	ID_2             int64
	EngineName       string
	EngineRank       int64
	EnginePage       int64
	EngineOnPageRank int64
	ResultID         int64
}

func (q *Queries) GetResultsByQueryWithEngineRanks(ctx context.Context, query string) ([]GetResultsByQueryWithEngineRanksRow, error) {
	rows, err := q.db.QueryContext(ctx, getResultsByQueryWithEngineRanks, query)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetResultsByQueryWithEngineRanksRow
	for rows.Next() {
		var i GetResultsByQueryWithEngineRanksRow
		if err := rows.Scan(
			&i.ID,
			&i.Query,
			&i.Url,
			&i.Rank,
			&i.Score,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.ID_2,
			&i.EngineName,
			&i.EngineRank,
			&i.EnginePage,
			&i.EngineOnPageRank,
			&i.ResultID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getResultsByQueryWithEngineRanksNotOlderThanTimestamp = `-- name: GetResultsByQueryWithEngineRanksNotOlderThanTimestamp :many
SELECT results.id, "query", url, rank, score, title, description, created_at, engine_ranks.id, engine_name, engine_rank, engine_page, engine_on_page_rank, result_id FROM results
JOIN engine_ranks ON results.id = engine_ranks.result_id
WHERE query = ? AND created_at > ?
ORDER BY results.rank ASC, engine_ranks.engine_rank ASC
`

type GetResultsByQueryWithEngineRanksNotOlderThanTimestampParams struct {
	Query     string
	CreatedAt time.Time
}

type GetResultsByQueryWithEngineRanksNotOlderThanTimestampRow struct {
	ID               int64
	Query            string
	Url              string
	Rank             int64
	Score            float64
	Title            string
	Description      string
	CreatedAt        time.Time
	ID_2             int64
	EngineName       string
	EngineRank       int64
	EnginePage       int64
	EngineOnPageRank int64
	ResultID         int64
}

func (q *Queries) GetResultsByQueryWithEngineRanksNotOlderThanTimestamp(ctx context.Context, arg GetResultsByQueryWithEngineRanksNotOlderThanTimestampParams) ([]GetResultsByQueryWithEngineRanksNotOlderThanTimestampRow, error) {
	rows, err := q.db.QueryContext(ctx, getResultsByQueryWithEngineRanksNotOlderThanTimestamp, arg.Query, arg.CreatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetResultsByQueryWithEngineRanksNotOlderThanTimestampRow
	for rows.Next() {
		var i GetResultsByQueryWithEngineRanksNotOlderThanTimestampRow
		if err := rows.Scan(
			&i.ID,
			&i.Query,
			&i.Url,
			&i.Rank,
			&i.Score,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.ID_2,
			&i.EngineName,
			&i.EngineRank,
			&i.EnginePage,
			&i.EngineOnPageRank,
			&i.ResultID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getResultsTTLByQuery = `-- name: GetResultsTTLByQuery :one
SELECT created_at FROM results
WHERE query = ?
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetResultsTTLByQuery(ctx context.Context, query string) (time.Time, error) {
	row := q.db.QueryRowContext(ctx, getResultsTTLByQuery, query)
	var created_at time.Time
	err := row.Scan(&created_at)
	return created_at, err
}

const getResultsTTLByQueryAndEngine = `-- name: GetResultsTTLByQueryAndEngine :one
SELECT created_at FROM results
JOIN engine_ranks ON results.id = engine_ranks.result_id
WHERE query = ? AND engine_ranks.engine_name = ?
ORDER BY created_at DESC
LIMIT 1
`

type GetResultsTTLByQueryAndEngineParams struct {
	Query      string
	EngineName string
}

func (q *Queries) GetResultsTTLByQueryAndEngine(ctx context.Context, arg GetResultsTTLByQueryAndEngineParams) (time.Time, error) {
	row := q.db.QueryRowContext(ctx, getResultsTTLByQueryAndEngine, arg.Query, arg.EngineName)
	var created_at time.Time
	err := row.Scan(&created_at)
	return created_at, err
}
