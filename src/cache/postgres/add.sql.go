// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: add.sql

package postgres

import (
	"context"
)

const addEngineRank = `-- name: AddEngineRank :exec
INSERT INTO engine_ranks (
  engine_name, engine_rank, engine_page, engine_on_page_rank, result_id
) VALUES (
  $1, $2, $3, $4, $5
)
`

type AddEngineRankParams struct {
	EngineName       string
	EngineRank       int64
	EnginePage       int64
	EngineOnPageRank int64
	ResultID         int64
}

func (q *Queries) AddEngineRank(ctx context.Context, arg AddEngineRankParams) error {
	_, err := q.db.Exec(ctx, addEngineRank,
		arg.EngineName,
		arg.EngineRank,
		arg.EnginePage,
		arg.EngineOnPageRank,
		arg.ResultID,
	)
	return err
}

const addImageResult = `-- name: AddImageResult :exec
INSERT INTO image_results (
  image_original_height, image_original_width, image_thumbnail_height, image_thumbnail_width, image_thumbnail_url, image_source, image_source_url, result_id
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
)
`

type AddImageResultParams struct {
	ImageOriginalHeight  int64
	ImageOriginalWidth   int64
	ImageThumbnailHeight int64
	ImageThumbnailWidth  int64
	ImageThumbnailUrl    string
	ImageSource          string
	ImageSourceUrl       string
	ResultID             int64
}

func (q *Queries) AddImageResult(ctx context.Context, arg AddImageResultParams) error {
	_, err := q.db.Exec(ctx, addImageResult,
		arg.ImageOriginalHeight,
		arg.ImageOriginalWidth,
		arg.ImageThumbnailHeight,
		arg.ImageThumbnailWidth,
		arg.ImageThumbnailUrl,
		arg.ImageSource,
		arg.ImageSourceUrl,
		arg.ResultID,
	)
	return err
}

const addResult = `-- name: AddResult :one
INSERT INTO results (
  query, url, rank, score, title, description
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id
`

type AddResultParams struct {
	Query       string
	Url         string
	Rank        int64
	Score       float64
	Title       string
	Description string
}

func (q *Queries) AddResult(ctx context.Context, arg AddResultParams) (int64, error) {
	row := q.db.QueryRow(ctx, addResult,
		arg.Query,
		arg.Url,
		arg.Rank,
		arg.Score,
		arg.Title,
		arg.Description,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}
